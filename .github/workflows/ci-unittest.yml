name: Unit tests

on:
  push:
    branches:
      # Change this before merging!
      - zack/basic-ci

jobs:
  conda-unit:
    name: |
      ${{ format('conda python: {0} os: {1} env: {2}',
                 matrix.python-version, matrix.os, matrix.environment-file) }}
    strategy:
      fail-fast: false
      matrix:
        # Conda-based installations are our recommendation, so we test
        # comprehensively.
        os: [ubuntu-latest, macos-latest, windows-latest]
        environment-file: ["environment.yml", "minimal_environment.yml"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13.0-rc.1"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # required for conda environments to work correctly
        # see https://github.com/marketplace/actions/setup-miniconda#important
        shell: bash -elo pipefail {0}
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies using Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge
          environment-file: ${{ matrix.environment-file }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
      - name: Run unit tests
        # -r fEsX means show details of tests that failed, errored, skipped
        # or passed when they were expected to fail.
        run: |
          pytest -r fEsX --cov=pdr --cov-branch --cov-report=
      - name: Store coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-conda-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.environment-file }}
          # the coverage data file will be named .coverage on unixy systems
          # but may be named _coverage on windows
          path: ?coverage
          if-no-files-found: ignore
          # unmerged coverage analysis data can be ephemeral
          retention-days: 1


  pip-unit:
    name: |
      ${{ format('pip python: {0} os: {1}',
                 matrix.python-version, matrix.os) }}
    strategy:
      fail-fast: false
      matrix:
        # This test exists to verify that the dependencies declared
        # for pip-based installs are accurate, and this should not be
        # drastically affected by which python we have.  Only test
        # with the oldest supported and latest stable python, but on
        # all three available OSes.
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies using pip
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[browsify,fits,tiff,pvl,tests]'
          pip install pytest-cov
      - name: Run unit tests
        # -r fEsX means show details of tests that failed, errored, skipped
        # or passed when they were expected to fail.
        run: |
          pytest -r fEsX --cov=pdr --cov-branch --cov-report=
      - name: Store coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-pip-${{ matrix.os }}-${{ matrix.python-version }}
          # the coverage data file will be named .coverage on unixy systems
          # but may be named _coverage on windows
          path: ?coverage
          if-no-files-found: ignore
          # unmerged coverage analysis data can be ephemeral
          retention-days: 1

  coverage:
    name: combined coverage report
    if: always()
    needs: [conda-unit, pip-unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - run: |
          python -m pip install --upgrade coverage[toml]
      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          # this does the exact opposite of what it sounds like:
          # if true, all the artifacts that match the pattern are
          # unpacked in the *same location* and clobber each other
          # if false they all get renamed to not collide
          merge-multiple: false
      - name: Crunch coverage data
        run: |
          shopt -s dotglob
          for dir in coverage-data-*/; do
              dir=${dir%/}
              tag=${dir#coverage-data-}
              mv "$dir"/?coverage ".coverage.$tag"
              rmdir "$dir"
          done
          python -m coverage combine
          python -m coverage html
          python -m coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
      - name: Store coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov
