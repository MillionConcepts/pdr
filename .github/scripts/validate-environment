#! /usr/bin/env python3

"""
Verify that the CI environment is set up as we expect and log a bunch
of useful troubleshooting information.
"""


import argparse
import os
import platform
import re
import shlex
import signal
import subprocess
import sys


def quote_str(s):
    r"""
    Return s with all shell metacharacters quoted and all unprintable
    characters converted to \u or \U escapes.  Whitespace characters
    are considered unprintable, _except_ for ASCII space.  (But ASCII
    space _is_ considered to require shell quoting.)
    """
    def quote_unprintable(m):
        u = ord(m.group(0))
        if u > 0xFFFF:
            return f"\\U{u:08X}"
        else:
            return f"\\u{u:04X}"
    # UNPRINTABLES_RE is at the bottom of the file
    return shlex.quote(UNPRINTABLES_RE.sub(quote_unprintable, s))


def log_environment(ofp):
    ofp.write("::group::Environment variables\n")
    for key, value in sorted(os.environ.items()):
        # Spacing here prevents the runner from redacting the name of
        # any environment variable whose value is a masked secret.
        ofp.write("{} = {}\n".format(quote_str(key), quote_str(value)))
    ofp.write("\n")


def log_dir_contents(ofp, path):
    ofp.write(quote_str(path) + ":\n")
    for entry in sorted(os.scandir(path), key = lambda e: e.name):
        if entry.is_symlink():
            dest = os.readlink(entry.path)
            tag = ' -> ' + quote_str(dest)
        elif entry.is_dir(follow_symlinks=False):
            tag = '/'
        elif entry.is_file(follow_symlinks=False):
            tag = ''
        else:
            tag = ' <?>'

        name = quote_str(entry.name)
        ofp.write(f"    {name}{tag}\n")


def log_file_contents(ofp, path):
    ofp.write(quote_str(path) + ":\n")
    with open(path, "rt") as fp:
        for line in fp:
            ofp.write(f"| {line.rstrip()}\n")


def log_cwd(ofp):
    ofp.write("::group::Working directory\n")
    log_dir_contents(ofp, os.getcwd())
    ofp.write("\n")


def log_venv(ofp):
    try:
        ofp.write("::group::Python virtualenv\n")
        venv_root = os.environ.get("VIRTUAL_ENV", None)
        if venv_root is None:
            ofp.write("::error::No virtualenv detected\n")
            return 1
        ofp.write(f"VIRTUAL_ENV={quote_str(venv_root)}\n")

        exe_path = os.environ.get("PATH", os.defpath).split(os.pathsep)
        ok = True
        for i, p in enumerate(exe_path):
            ofp.write(f"PATH[{i}]={quote_str(p)}\n")
            if not os.path.isabs(p):
                ofp.write(f"::error::PATH entry {i} is not absolute\n")
                ok = False
        if not ok:
            return 1

        path_0_canon = os.path.realpath(exe_path[0])
        venv_bin_canon = os.path.realpath(os.path.join(venv_root, 'bin'))
        if path_0_canon != venv_bin_canon:
            ofp.write(f"::error::PATH[0] is {quote_str(path_0_canon)},"
                      f" not {quote_str(venv_bin_canon)}\n")
            return 1

        ofp.write("\n")
        log_dir_contents(ofp, venv_root)
        ofp.write("\n")
        log_dir_contents(ofp, os.path.join(venv_root, 'bin'))
        ofp.write("\n")
        log_file_contents(ofp, os.path.join(venv_root, 'pyvenv.cfg'))
        return 0

    except OSError as e:
        ofp.write(f"::error::{e.strerror} {quote_str(e.filename)}\n")
        return 1


def log_sysinfo(ofp):
    ofp.write("::group::System information\n")

    params = [
        ("sys.executable", sys.executable),
        ("sys.implementation.name", sys.implementation.name),
        ("sys.version", sys.version),
        ("sys.base_exec_prefix", sys.base_exec_prefix),
        ("sys.base_prefix", sys.base_prefix),
        ("sys.exec_prefix", sys.exec_prefix),
        ("sys.prefix", sys.prefix),
        ("sys.path", os.pathsep.join(os.path.realpath(p)
                                     for p in sys.path)),
        ("sys.platform", sys.platform),
        ("os.name", os.name),
        ("platform.machine", platform.machine())
    ]

    pklen = max(len(k) for k, v in params)
    for k, v in params:
        ofp.write(f"{k:<{pklen}} = {quote_str(v)}\n")
    ofp.write("\n")


def log_commands(ofp, expected_pyver):
    status = 0
    def report_exit(program, rc, exp_rc=None):
        nonlocal status

        if '/' in program or '\\' in program:
            cmd = os.path.basename(program)
        else:
            cmd = program

        if rc == exp_rc:
            if rc == 0:
                # don't print anything for an expected successful exit
                return
            elif rc < 0:
                ofp.write(f"{cmd}: {strsignal(rc)} (as expected)\n")
            else:
                ofp.write(f"{cmd}: exit {rc} (as expected)\n")

        else:
            status = 1
            if rc < 0:
                ofp.write(f"{cmd}: {strsignal(rc)}\n")
            else:
                ofp.write(f"{cmd}: unexpected exit {rc}\n")

    ofp.write("::group::Interpreter and utilities\n")

    bin_path = os.environ.get("PATH", os.defpath).split(os.pathsep)

    commands = [
        "python",
        "python3",
        "python" + expected_pyver,
        "pip",
    ]

    programs = []
    for cmd in commands:
        for bin_dir in bin_path:
            path = os.path.join(os.path.realpath(bin_dir), cmd)
            found = False
            for suffix in ("", ".exe", ".bat"):
                xpath = path + suffix
                if os.path.isfile(xpath):
                    programs.append((cmd, xpath))
                    found = True
                    break
            if found:
                break

        else:
            programs.append((cmd, None))

    for cmd, program in programs:
        if program is None:
            if cmd == "python":
                ofp.write(f"{cmd} not found\n")
            else:
                ofp.write(f"::error::{cmd} not found\n")
                status = 1
            continue

        ofp.write(f"{cmd} is {quote_str(program)}\n")

        try:
            if cmd == "pip":
                # Just log the version.
                ofp.write("> pip --version\n")
                ofp.flush()
                subprocess.run([program, "--version"],
                               check=True, timeout=1,
                               stdout=ofp, stderr=subprocess.STDOUT)

            elif cmd == "python":
                # If this command exists, it should error out for
                # everything (see make-venv).
                ofp.write("> python --version # should fail\n")
                ofp.flush()
                result = subprocess.run([program, "--version"],
                                        timeout=1, stdout=ofp,
                                        stderr=subprocess.STDOUT)
                report_exit(program, result.returncode, 1)

            else:
                ofp.write(f"> {cmd} --version\n")
                ofp.flush()
                subprocess.run([program, "--version"],
                               check=True, timeout=1,
                               stdout=ofp, stderr=subprocess.STDOUT)
                result = subprocess.run([
                    program, "-c",
                    "import sys\n"
                    "sys.exit(0 if sys.version.split('.')[:2]"
                    " == sys.argv[1].split('.') else 1)",
                    expected_pyver
                ], timeout=1, stdout=ofp, stderr=subprocess.STDOUT)
                if result.returncode == 1:
                    ofp.write(
                        f"::error::wrong version for {cmd}"
                        f" (expected {expected_pyver})\n"
                    )
                else:
                    report_exit(program, result.returncode, 0)

        except OSError as e:
            ofp.write(f"::error::{program}: {e.strerror}\n")
            status = 1

        except subprocess.TimeoutExpired as e:
            ofp.write(
                f"::error::{e.cmd[0]}: timed out"
                f" after {round(e.timeout)}s\n"
            )
            status = 1

        except subprocess.CalledProcessError as e:
            report_exit(e.cmd[0], e.returncode)

        ofp.write("\n")

    if status == 0:
        ofp.write("::group::pip debug\n")
        ofp.flush()
        result = subprocess.run(["pip", "debug"], stdout=ofp,
                                stderr=subprocess.STDOUT)
        report_exit("pip", result.returncode, 0)

    return status


def main():
    ap = argparse.ArgumentParser(description=__doc__)
    ap.add_argument(
        "expected_python_version",
        help="Verify that the Python interpreter is this version,"
        " to feature-release precision (e.g. 3.12 rather than 3.11)."
    )
    args = ap.parse_args()

    status = 0
    with sys.stdout as ofp:
        log_sysinfo(ofp)
        log_environment(ofp)
        log_cwd(ofp)
        status |= log_venv(ofp)
        status |= log_commands(ofp, args.expected_python_version)

    sys.exit(status)

# This is at the bottom because it's long and uninteresting.
# Watch out that there's a call to main() below it!
# The regex was generated by this code, executed by Python 3.12
# (unicodedata.unidata_version == '15.0.0').
#
# def gen_unprintables_re():
#     runs = []
#     first = None
#     for u in range(sys.maxunicode + 1):
#         c = chr(u)
#         cat = unicodedata.category(c)
#         # ASCII space is the only whitespace (Z) character we *don't*
#         # quote.  U+FFF0..F are quoted regardless of whether Unicode
#         # thinks they're printable; this currently affects U+FFFC and
#         # U+FFFD.
#         if (
#                 not (0xFFF0 <= u <= 0xFFFF)
#                 and (cat[0] in ('L', 'M', 'N', 'P', 'S') or c == ' ')
#         ):
#             if first is not None:
#                 runs.append((first, chr(u-1)))
#                 first = None
#         else:
#             if first is None:
#                 first = c
#     if first is not None:
#         runs.append((first, chr(sys.maxunicode - 1)))
#     # none of the characters in 'runs' are regex syntax characters,
#     # because those are all printable!
#     return '[' + ''.join(
#         (f'{a}-{b}' if a != b else a) for a, b in runs
#     ) + ']'
UNPRINTABLES_RE = re.compile(
    '[\u0000-\u001f\u007f-\u00a0\u00ad\u0378-\u0379\u0380-\u0383\u038b'
    '\u038d\u03a2\u0530\u0557-\u0558\u058b-\u058c\u0590\u05c8-\u05cf'
    '\u05eb-\u05ee\u05f5-\u0605\u061c\u06dd\u070e-\u070f\u074b-\u074c'
    '\u07b2-\u07bf\u07fb-\u07fc\u082e-\u082f\u083f\u085c-\u085d\u085f'
    '\u086b-\u086f\u088f-\u0897\u08e2\u0984\u098d-\u098e\u0991-\u0992'
    '\u09a9\u09b1\u09b3-\u09b5\u09ba-\u09bb\u09c5-\u09c6\u09c9-\u09ca'
    '\u09cf-\u09d6\u09d8-\u09db\u09de\u09e4-\u09e5\u09ff-\u0a00\u0a04'
    '\u0a0b-\u0a0e\u0a11-\u0a12\u0a29\u0a31\u0a34\u0a37\u0a3a-\u0a3b'
    '\u0a3d\u0a43-\u0a46\u0a49-\u0a4a\u0a4e-\u0a50\u0a52-\u0a58\u0a5d'
    '\u0a5f-\u0a65\u0a77-\u0a80\u0a84\u0a8e\u0a92\u0aa9\u0ab1\u0ab4'
    '\u0aba-\u0abb\u0ac6\u0aca\u0ace-\u0acf\u0ad1-\u0adf\u0ae4-\u0ae5'
    '\u0af2-\u0af8\u0b00\u0b04\u0b0d-\u0b0e\u0b11-\u0b12\u0b29\u0b31'
    '\u0b34\u0b3a-\u0b3b\u0b45-\u0b46\u0b49-\u0b4a\u0b4e-\u0b54'
    '\u0b58-\u0b5b\u0b5e\u0b64-\u0b65\u0b78-\u0b81\u0b84\u0b8b-\u0b8d'
    '\u0b91\u0b96-\u0b98\u0b9b\u0b9d\u0ba0-\u0ba2\u0ba5-\u0ba7'
    '\u0bab-\u0bad\u0bba-\u0bbd\u0bc3-\u0bc5\u0bc9\u0bce-\u0bcf'
    '\u0bd1-\u0bd6\u0bd8-\u0be5\u0bfb-\u0bff\u0c0d\u0c11\u0c29'
    '\u0c3a-\u0c3b\u0c45\u0c49\u0c4e-\u0c54\u0c57\u0c5b-\u0c5c'
    '\u0c5e-\u0c5f\u0c64-\u0c65\u0c70-\u0c76\u0c8d\u0c91\u0ca9\u0cb4'
    '\u0cba-\u0cbb\u0cc5\u0cc9\u0cce-\u0cd4\u0cd7-\u0cdc\u0cdf'
    '\u0ce4-\u0ce5\u0cf0\u0cf4-\u0cff\u0d0d\u0d11\u0d45\u0d49'
    '\u0d50-\u0d53\u0d64-\u0d65\u0d80\u0d84\u0d97-\u0d99\u0db2\u0dbc'
    '\u0dbe-\u0dbf\u0dc7-\u0dc9\u0dcb-\u0dce\u0dd5\u0dd7\u0de0-\u0de5'
    '\u0df0-\u0df1\u0df5-\u0e00\u0e3b-\u0e3e\u0e5c-\u0e80\u0e83\u0e85'
    '\u0e8b\u0ea4\u0ea6\u0ebe-\u0ebf\u0ec5\u0ec7\u0ecf\u0eda-\u0edb'
    '\u0ee0-\u0eff\u0f48\u0f6d-\u0f70\u0f98\u0fbd\u0fcd\u0fdb-\u0fff'
    '\u10c6\u10c8-\u10cc\u10ce-\u10cf\u1249\u124e-\u124f\u1257\u1259'
    '\u125e-\u125f\u1289\u128e-\u128f\u12b1\u12b6-\u12b7\u12bf\u12c1'
    '\u12c6-\u12c7\u12d7\u1311\u1316-\u1317\u135b-\u135c\u137d-\u137f'
    '\u139a-\u139f\u13f6-\u13f7\u13fe-\u13ff\u1680\u169d-\u169f'
    '\u16f9-\u16ff\u1716-\u171e\u1737-\u173f\u1754-\u175f\u176d\u1771'
    '\u1774-\u177f\u17de-\u17df\u17ea-\u17ef\u17fa-\u17ff\u180e'
    '\u181a-\u181f\u1879-\u187f\u18ab-\u18af\u18f6-\u18ff\u191f'
    '\u192c-\u192f\u193c-\u193f\u1941-\u1943\u196e-\u196f\u1975-\u197f'
    '\u19ac-\u19af\u19ca-\u19cf\u19db-\u19dd\u1a1c-\u1a1d\u1a5f'
    '\u1a7d-\u1a7e\u1a8a-\u1a8f\u1a9a-\u1a9f\u1aae-\u1aaf\u1acf-\u1aff'
    '\u1b4d-\u1b4f\u1b7f\u1bf4-\u1bfb\u1c38-\u1c3a\u1c4a-\u1c4c'
    '\u1c89-\u1c8f\u1cbb-\u1cbc\u1cc8-\u1ccf\u1cfb-\u1cff\u1f16-\u1f17'
    '\u1f1e-\u1f1f\u1f46-\u1f47\u1f4e-\u1f4f\u1f58\u1f5a\u1f5c\u1f5e'
    '\u1f7e-\u1f7f\u1fb5\u1fc5\u1fd4-\u1fd5\u1fdc\u1ff0-\u1ff1\u1ff5'
    '\u1fff-\u200f\u2028-\u202f\u205f-\u206f\u2072-\u2073\u208f'
    '\u209d-\u209f\u20c1-\u20cf\u20f1-\u20ff\u218c-\u218f\u2427-\u243f'
    '\u244b-\u245f\u2b74-\u2b75\u2b96\u2cf4-\u2cf8\u2d26\u2d28-\u2d2c'
    '\u2d2e-\u2d2f\u2d68-\u2d6e\u2d71-\u2d7e\u2d97-\u2d9f\u2da7\u2daf'
    '\u2db7\u2dbf\u2dc7\u2dcf\u2dd7\u2ddf\u2e5e-\u2e7f\u2e9a'
    '\u2ef4-\u2eff\u2fd6-\u2fef\u2ffc-\u3000\u3040\u3097-\u3098'
    '\u3100-\u3104\u3130\u318f\u31e4-\u31ef\u321f\ua48d-\ua48f'
    '\ua4c7-\ua4cf\ua62c-\ua63f\ua6f8-\ua6ff\ua7cb-\ua7cf\ua7d2\ua7d4'
    '\ua7da-\ua7f1\ua82d-\ua82f\ua83a-\ua83f\ua878-\ua87f\ua8c6-\ua8cd'
    '\ua8da-\ua8df\ua954-\ua95e\ua97d-\ua97f\ua9ce\ua9da-\ua9dd\ua9ff'
    '\uaa37-\uaa3f\uaa4e-\uaa4f\uaa5a-\uaa5b\uaac3-\uaada\uaaf7-\uab00'
    '\uab07-\uab08\uab0f-\uab10\uab17-\uab1f\uab27\uab2f\uab6c-\uab6f'
    '\uabee-\uabef\uabfa-\uabff\ud7a4-\ud7af\ud7c7-\ud7ca\ud7fc-\uf8ff'
    '\ufa6e-\ufa6f\ufada-\ufaff\ufb07-\ufb12\ufb18-\ufb1c\ufb37\ufb3d'
    '\ufb3f\ufb42\ufb45\ufbc3-\ufbd2\ufd90-\ufd91\ufdc8-\ufdce'
    '\ufdd0-\ufdef\ufe1a-\ufe1f\ufe53\ufe67\ufe6c-\ufe6f\ufe75'
    '\ufefd-\uff00\uffbf-\uffc1\uffc8-\uffc9\uffd0-\uffd1\uffd8-\uffd9'
    '\uffdd-\uffdf\uffe7\uffef-\uffff\U0001000c\U00010027'
    '\U0001003b\U0001003e\U0001004e-\U0001004f\U0001005e-\U0001007f'
    '\U000100fb-\U000100ff\U00010103-\U00010106\U00010134-\U00010136'
    '\U0001018f\U0001019d-\U0001019f\U000101a1-\U000101cf'
    '\U000101fe-\U0001027f\U0001029d-\U0001029f\U000102d1-\U000102df'
    '\U000102fc-\U000102ff\U00010324-\U0001032c\U0001034b-\U0001034f'
    '\U0001037b-\U0001037f\U0001039e\U000103c4-\U000103c7'
    '\U000103d6-\U000103ff\U0001049e-\U0001049f\U000104aa-\U000104af'
    '\U000104d4-\U000104d7\U000104fc-\U000104ff\U00010528-\U0001052f'
    '\U00010564-\U0001056e\U0001057b\U0001058b\U00010593\U00010596'
    '\U000105a2\U000105b2\U000105ba\U000105bd-\U000105ff'
    '\U00010737-\U0001073f\U00010756-\U0001075f\U00010768-\U0001077f'
    '\U00010786\U000107b1\U000107bb-\U000107ff\U00010806-\U00010807'
    '\U00010809\U00010836\U00010839-\U0001083b\U0001083d-\U0001083e'
    '\U00010856\U0001089f-\U000108a6\U000108b0-\U000108df\U000108f3'
    '\U000108f6-\U000108fa\U0001091c-\U0001091e\U0001093a-\U0001093e'
    '\U00010940-\U0001097f\U000109b8-\U000109bb\U000109d0-\U000109d1'
    '\U00010a04\U00010a07-\U00010a0b\U00010a14\U00010a18'
    '\U00010a36-\U00010a37\U00010a3b-\U00010a3e\U00010a49-\U00010a4f'
    '\U00010a59-\U00010a5f\U00010aa0-\U00010abf\U00010ae7-\U00010aea'
    '\U00010af7-\U00010aff\U00010b36-\U00010b38\U00010b56-\U00010b57'
    '\U00010b73-\U00010b77\U00010b92-\U00010b98\U00010b9d-\U00010ba8'
    '\U00010bb0-\U00010bff\U00010c49-\U00010c7f\U00010cb3-\U00010cbf'
    '\U00010cf3-\U00010cf9\U00010d28-\U00010d2f\U00010d3a-\U00010e5f'
    '\U00010e7f\U00010eaa\U00010eae-\U00010eaf\U00010eb2-\U00010efc'
    '\U00010f28-\U00010f2f\U00010f5a-\U00010f6f\U00010f8a-\U00010faf'
    '\U00010fcc-\U00010fdf\U00010ff7-\U00010fff\U0001104e-\U00011051'
    '\U00011076-\U0001107e\U000110bd\U000110c3-\U000110cf'
    '\U000110e9-\U000110ef\U000110fa-\U000110ff\U00011135'
    '\U00011148-\U0001114f\U00011177-\U0001117f\U000111e0'
    '\U000111f5-\U000111ff\U00011212\U00011242-\U0001127f\U00011287'
    '\U00011289\U0001128e\U0001129e\U000112aa-\U000112af'
    '\U000112eb-\U000112ef\U000112fa-\U000112ff\U00011304'
    '\U0001130d-\U0001130e\U00011311-\U00011312\U00011329\U00011331'
    '\U00011334\U0001133a\U00011345-\U00011346\U00011349-\U0001134a'
    '\U0001134e-\U0001134f\U00011351-\U00011356\U00011358-\U0001135c'
    '\U00011364-\U00011365\U0001136d-\U0001136f\U00011375-\U000113ff'
    '\U0001145c\U00011462-\U0001147f\U000114c8-\U000114cf'
    '\U000114da-\U0001157f\U000115b6-\U000115b7\U000115de-\U000115ff'
    '\U00011645-\U0001164f\U0001165a-\U0001165f\U0001166d-\U0001167f'
    '\U000116ba-\U000116bf\U000116ca-\U000116ff\U0001171b-\U0001171c'
    '\U0001172c-\U0001172f\U00011747-\U000117ff\U0001183c-\U0001189f'
    '\U000118f3-\U000118fe\U00011907-\U00011908\U0001190a-\U0001190b'
    '\U00011914\U00011917\U00011936\U00011939-\U0001193a'
    '\U00011947-\U0001194f\U0001195a-\U0001199f\U000119a8-\U000119a9'
    '\U000119d8-\U000119d9\U000119e5-\U000119ff\U00011a48-\U00011a4f'
    '\U00011aa3-\U00011aaf\U00011af9-\U00011aff\U00011b0a-\U00011bff'
    '\U00011c09\U00011c37\U00011c46-\U00011c4f\U00011c6d-\U00011c6f'
    '\U00011c90-\U00011c91\U00011ca8\U00011cb7-\U00011cff\U00011d07'
    '\U00011d0a\U00011d37-\U00011d39\U00011d3b\U00011d3e'
    '\U00011d48-\U00011d4f\U00011d5a-\U00011d5f\U00011d66\U00011d69'
    '\U00011d8f\U00011d92\U00011d99-\U00011d9f\U00011daa-\U00011edf'
    '\U00011ef9-\U00011eff\U00011f11\U00011f3b-\U00011f3d'
    '\U00011f5a-\U00011faf\U00011fb1-\U00011fbf\U00011ff2-\U00011ffe'
    '\U0001239a-\U000123ff\U0001246f\U00012475-\U0001247f'
    '\U00012544-\U00012f8f\U00012ff3-\U00012fff\U00013430-\U0001343f'
    '\U00013456-\U000143ff\U00014647-\U000167ff\U00016a39-\U00016a3f'
    '\U00016a5f\U00016a6a-\U00016a6d\U00016abf\U00016aca-\U00016acf'
    '\U00016aee-\U00016aef\U00016af6-\U00016aff\U00016b46-\U00016b4f'
    '\U00016b5a\U00016b62\U00016b78-\U00016b7c\U00016b90-\U00016e3f'
    '\U00016e9b-\U00016eff\U00016f4b-\U00016f4e\U00016f88-\U00016f8e'
    '\U00016fa0-\U00016fdf\U00016fe5-\U00016fef\U00016ff2-\U00016fff'
    '\U000187f8-\U000187ff\U00018cd6-\U00018cff\U00018d09-\U0001afef'
    '\U0001aff4\U0001affc\U0001afff\U0001b123-\U0001b131'
    '\U0001b133-\U0001b14f\U0001b153-\U0001b154\U0001b156-\U0001b163'
    '\U0001b168-\U0001b16f\U0001b2fc-\U0001bbff\U0001bc6b-\U0001bc6f'
    '\U0001bc7d-\U0001bc7f\U0001bc89-\U0001bc8f\U0001bc9a-\U0001bc9b'
    '\U0001bca0-\U0001ceff\U0001cf2e-\U0001cf2f\U0001cf47-\U0001cf4f'
    '\U0001cfc4-\U0001cfff\U0001d0f6-\U0001d0ff\U0001d127-\U0001d128'
    '\U0001d173-\U0001d17a\U0001d1eb-\U0001d1ff\U0001d246-\U0001d2bf'
    '\U0001d2d4-\U0001d2df\U0001d2f4-\U0001d2ff\U0001d357-\U0001d35f'
    '\U0001d379-\U0001d3ff\U0001d455\U0001d49d\U0001d4a0-\U0001d4a1'
    '\U0001d4a3-\U0001d4a4\U0001d4a7-\U0001d4a8\U0001d4ad\U0001d4ba'
    '\U0001d4bc\U0001d4c4\U0001d506\U0001d50b-\U0001d50c\U0001d515'
    '\U0001d51d\U0001d53a\U0001d53f\U0001d545\U0001d547-\U0001d549'
    '\U0001d551\U0001d6a6-\U0001d6a7\U0001d7cc-\U0001d7cd'
    '\U0001da8c-\U0001da9a\U0001daa0\U0001dab0-\U0001deff'
    '\U0001df1f-\U0001df24\U0001df2b-\U0001dfff\U0001e007'
    '\U0001e019-\U0001e01a\U0001e022\U0001e025\U0001e02b-\U0001e02f'
    '\U0001e06e-\U0001e08e\U0001e090-\U0001e0ff\U0001e12d-\U0001e12f'
    '\U0001e13e-\U0001e13f\U0001e14a-\U0001e14d\U0001e150-\U0001e28f'
    '\U0001e2af-\U0001e2bf\U0001e2fa-\U0001e2fe\U0001e300-\U0001e4cf'
    '\U0001e4fa-\U0001e7df\U0001e7e7\U0001e7ec\U0001e7ef\U0001e7ff'
    '\U0001e8c5-\U0001e8c6\U0001e8d7-\U0001e8ff\U0001e94c-\U0001e94f'
    '\U0001e95a-\U0001e95d\U0001e960-\U0001ec70\U0001ecb5-\U0001ed00'
    '\U0001ed3e-\U0001edff\U0001ee04\U0001ee20\U0001ee23'
    '\U0001ee25-\U0001ee26\U0001ee28\U0001ee33\U0001ee38\U0001ee3a'
    '\U0001ee3c-\U0001ee41\U0001ee43-\U0001ee46\U0001ee48\U0001ee4a'
    '\U0001ee4c\U0001ee50\U0001ee53\U0001ee55-\U0001ee56\U0001ee58'
    '\U0001ee5a\U0001ee5c\U0001ee5e\U0001ee60\U0001ee63'
    '\U0001ee65-\U0001ee66\U0001ee6b\U0001ee73\U0001ee78\U0001ee7d'
    '\U0001ee7f\U0001ee8a\U0001ee9c-\U0001eea0\U0001eea4\U0001eeaa'
    '\U0001eebc-\U0001eeef\U0001eef2-\U0001efff\U0001f02c-\U0001f02f'
    '\U0001f094-\U0001f09f\U0001f0af-\U0001f0b0\U0001f0c0\U0001f0d0'
    '\U0001f0f6-\U0001f0ff\U0001f1ae-\U0001f1e5\U0001f203-\U0001f20f'
    '\U0001f23c-\U0001f23f\U0001f249-\U0001f24f\U0001f252-\U0001f25f'
    '\U0001f266-\U0001f2ff\U0001f6d8-\U0001f6db\U0001f6ed-\U0001f6ef'
    '\U0001f6fd-\U0001f6ff\U0001f777-\U0001f77a\U0001f7da-\U0001f7df'
    '\U0001f7ec-\U0001f7ef\U0001f7f1-\U0001f7ff\U0001f80c-\U0001f80f'
    '\U0001f848-\U0001f84f\U0001f85a-\U0001f85f\U0001f888-\U0001f88f'
    '\U0001f8ae-\U0001f8af\U0001f8b2-\U0001f8ff\U0001fa54-\U0001fa5f'
    '\U0001fa6e-\U0001fa6f\U0001fa7d-\U0001fa7f\U0001fa89-\U0001fa8f'
    '\U0001fabe\U0001fac6-\U0001facd\U0001fadc-\U0001fadf'
    '\U0001fae9-\U0001faef\U0001faf9-\U0001faff\U0001fb93'
    '\U0001fbcb-\U0001fbef\U0001fbfa-\U0001ffff\U0002a6e0-\U0002a6ff'
    '\U0002b73a-\U0002b73f\U0002b81e-\U0002b81f\U0002cea2-\U0002ceaf'
    '\U0002ebe1-\U0002f7ff\U0002fa1e-\U0002ffff\U0003134b-\U0003134f'
    '\U000323b0-\U000e00ff\U000e01f0-\U0010fffe]')

# This has to be the very last thing in the file.
if __name__ == '__main__':
    main()
